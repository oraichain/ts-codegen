/**
* This file was automatically generated by @cosmwasm/ts-codegen@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient } from "@cosmjs/cosmwasm-stargate";
import { IQueryClientProvider, ISigningClientProvider, IMessageComposerProvider } from "./contractContextBase";
import { FactoryQueryClient } from "./Factory.client";
import { FactoryClient } from "./Factory.client";
import { FactoryMsgComposer } from "./Factory.message-composer";
import { Factory } from "./Factory.provider";
import { MinterQueryClient } from "./Minter.client";
import { MinterClient } from "./Minter.client";
import { MinterMsgComposer } from "./Minter.message-composer";
import { Minter } from "./Minter.provider";
import { CwAdminFactoryQueryClient } from "./CwAdminFactory.client";
import { CwAdminFactoryClient } from "./CwAdminFactory.client";
import { CwAdminFactoryMsgComposer } from "./CwAdminFactory.message-composer";
import { CwAdminFactory } from "./CwAdminFactory.provider";
import { CwCodeIdRegistryQueryClient } from "./CwCodeIdRegistry.client";
import { CwCodeIdRegistryClient } from "./CwCodeIdRegistry.client";
import { CwCodeIdRegistryMsgComposer } from "./CwCodeIdRegistry.message-composer";
import { CwCodeIdRegistry } from "./CwCodeIdRegistry.provider";
import { CwSingleQueryClient } from "./CwSingle.client";
import { CwSingleClient } from "./CwSingle.client";
import { CwSingleMsgComposer } from "./CwSingle.message-composer";
import { CwSingle } from "./CwSingle.provider";
export interface IContractsContext {
  factory: IQueryClientProvider<FactoryQueryClient> & ISigningClientProvider<FactoryClient> & IMessageComposerProvider<FactoryMsgComposer>;
  minter: IQueryClientProvider<MinterQueryClient> & ISigningClientProvider<MinterClient> & IMessageComposerProvider<MinterMsgComposer>;
  cwAdminFactory: IQueryClientProvider<CwAdminFactoryQueryClient> & ISigningClientProvider<CwAdminFactoryClient> & IMessageComposerProvider<CwAdminFactoryMsgComposer>;
  cwCodeIdRegistry: IQueryClientProvider<CwCodeIdRegistryQueryClient> & ISigningClientProvider<CwCodeIdRegistryClient> & IMessageComposerProvider<CwCodeIdRegistryMsgComposer>;
  cwSingle: IQueryClientProvider<CwSingleQueryClient> & ISigningClientProvider<CwSingleClient> & IMessageComposerProvider<CwSingleMsgComposer>;
}
export const getProviders = (address?: string, cosmWasmClient?: CosmWasmClient, signingCosmWasmClient?: SigningCosmWasmClient) => ({
  factory: new Factory({
    address,
    cosmWasmClient,
    signingCosmWasmClient
  }),
  minter: new Minter({
    address,
    cosmWasmClient,
    signingCosmWasmClient
  }),
  cwAdminFactory: new CwAdminFactory({
    address,
    cosmWasmClient,
    signingCosmWasmClient
  }),
  cwCodeIdRegistry: new CwCodeIdRegistry({
    address,
    cosmWasmClient,
    signingCosmWasmClient
  }),
  cwSingle: new CwSingle({
    address,
    cosmWasmClient,
    signingCosmWasmClient
  })
});