import { join, dirname } from "path";
import { sync as mkdirp } from "mkdirp";
import pkg from "../../package.json";
import { writeContentToFile } from "../utils/files";
import { TSBuilderInput } from "../builder";
import { contractContextBase, contractsContextTSX } from "../helpers";
import { BuilderContext } from "wasm-ast-types";

const version = process.env.NODE_ENV === "test" ? "latest" : pkg.version;
const header = `/**
* This file and any referenced files were automatically generated by ${pkg.name}@${version}
* DO NOT MODIFY BY HAND. Instead, download the latest proto files for your chain
* and run the transpile command or yarn proto command to regenerate this bundle.
*/
\n`;

const write = (outPath: string, file: string, content: string) => {
  const outFile = join(outPath, file);
  mkdirp(dirname(outFile));
  writeContentToFile(outPath, header + content, outFile);
};

export const createHelpers = (input: TSBuilderInput, builderContext: BuilderContext) => {
  if (input.options?.useContractsHooks?.enabled && Object.keys(builderContext.providers)?.length) {
    write(input.outPath, "contractContextBase.ts", contractContextBase);
    write(input.outPath, "contracts-context.tsx", contractsContextTSX);
  }
};
